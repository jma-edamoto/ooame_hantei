package jp.go.kishou.adess.oswy61.distinction.rain.test;

import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

import org.junit.Test;

import jp.go.kishou.adess.oswy61.distinction.rain.bean.JudgeDataBean;

public class JudgeDataBeanTest {

	@Test
	public void test() throws Exception {
		JudgeDataBean bean  = new JudgeDataBean();
		String csvPath = "MSM2021101900UTC.csv";
		bean.init(csvPath);

		//CSVèÓïÒ
        assertEquals(bean.getFname(), "MSM2021101900UTC.csv");
        assertEquals(bean.getFt(), 33);
        assertThat(bean.getJst(), arrayContaining("19 09","19 10","19 11","19 12","19 13","19 14","19 15","19 16","19 17","19 18","19 19","19 20","19 21","19 22","19 23","20 00","20 01","20 02","20 03","20 04","20 05","20 06","20 07","20 08","20 09","20 10","20 11","20 12","20 13","20 14","20 15","20 16","20 17","20 18"));

        //ìÏêºïóån
        assertArrayEquals(bean.getSw_kindex(), new double[]{23.8,28.6,31.9,33.4,31.7,30.2,30.2,23.2,29.5,28.8,31.6,32.1,32.3,18.9,17.4,9.4,10.8,8.7,5.9,2.8,5.2,3.4,3.3,-3.8,-19.2,-22.8,-24.7,-24.2,-22.7,-23.0,-21.0,-22.3,-21.9,-21.7}, 0.01);
        assertArrayEquals(bean.getSw_ssi(), new double[]{3.8,2.4,0.9,0.7,1.9,2.4,2.0,2.6,1.2,0.0,0.0,0.3,0.6,4.2,5.3,6.5,6.4,6.7,7.4,8.8,5.5,7.7,7.6,7.5,8.4,9.5,10.8,10.3,10.4,11.2,10.2,11.4,11.6,11.9}, 0.01);
        assertArrayEquals(bean.getSw_tpw(), new double[]{26.8,28.9,29.7,30.2,30.1,29.6,29.3,26.6,28.4,29.6,29.6,28.6,25.5,20.1,18.1,15.5,15.6,15.5,15.6,14.1,17.2,17.2,17.0,16.5,15.5,14.5,12.7,12.9,13.8,13.9,15.2,14.1,14.4,14.5}, 0.01);
        assertArrayEquals(bean.getSw_ept950(), new int[]{316,316,316,317,317,318,318,319,320,319,318,317,316,315,313,311,311,310,309,308,309,308,308,307,307,305,304,304,304,304,305,304,304,304});
        assertArrayEquals(bean.getSw_ept850(), new int[]{317,319,320,320,318,317,317,315,316,318,318,316,314,309,306,304,305,305,304,303,307,305,305,306,305,303,302,302,303,303,304,302,302,302});
        assertArrayEquals(bean.getSw_eptdif(), new int[]{-1,-3,-4,-3,-1,1,1,4,4,1,0,1,2,6,7,7,6,5,5,5,2,3,3,1,2,2,2,2,1,1,1,2,2,2});
        assertArrayEquals(bean.getSw_r1(), new double[]{31.7,31.9,32.1,32.3,31.3,32.7,31.3,31.1,30.8,28.6,28.2,27.4,25.0,18.8,16.6,13.2,13.2,10.6,9.1,7.6,7.7,5.3,6.6,6.4,5.7,3.9,2.9,2.2,2.7,2.6,5.0,3.1,3.7,4.6}, 0.01);

        assertArrayEquals(bean.getSwSpeed950Score()  , new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSwKIndexScore()  , new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSwSsiScore()  , new int[]{0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSwTpwScore()  , new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSwEpt950Score()  , new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSwEpt850Score()  , new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSwEptDiffScore()  , new int[]{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1});

        assertArrayEquals(bean.getSw_pNairiku(), new int[]{2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222});
        assertArrayEquals(bean.getSw_pKichu(), new int[]{2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222});
        assertArrayEquals(bean.getSw_pHokubu(), new int[]{2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222});
        assertArrayEquals(bean.getSw_pEngan(), new int[]{2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222});
        assertArrayEquals(bean.getSw_pTanabe(), new int[]{2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222});
        assertArrayEquals(bean.getSw_flag(), new Boolean[]{true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true});

        //ìÏìåïóån
        assertArrayEquals(bean.getSe_v700(), new double[] {14.2,16.0,15.3,14.6,13.4,13.2,12.4,10.8,9.1,11.1,22.2,27.7,26.9,25.9,23.1,20.6,10.6,5.6,2.4,-0.7,-2.3,-3.1,-4.6,-7.4,-5.9,-6.2,-6.8,-6.9,-8.3,-9.3,-9.8,-9.6,-9.0,-8.7}, 0.01);
        assertArrayEquals(bean.getSe_u850(), new double[] {-18.5,-10.6,-6.6,-7.3,-4.5,-2.0,-0.1,0.2,12.1,21.9,28.3,24.8,17.0,25.3,30.7,25.1,28.3,25.4,27.7,29.6,32.0,27.5,13.9,13.9,17.8,16.9,16.6,15.0,11.6,10.7,11.0,10.2,9.7,8.9}, 0.01);
        assertArrayEquals(bean.getSe_kindex(), new double[] {31.8,30.8,31.2,32.8,33.6,34.8,34.3,34.6,33.4,32.7,30.1,29.9,30.6,30.6,28.5,22.6,8.4,4.3,-1.6,-2.9,-5.2,-4.6,1.1,-5.3,-13.5,-20.6,-23.2,-24.4,-25.0,-26.1,-25.0,-24.2,-23.8,-22.8}, 0.01);
        assertArrayEquals(bean.getSe_ssi(), new double[] {2.4,2.0,1.7,1.2,0.6,-0.3,0.3,0.0,0.9,1.4,2.8,2.6,1.1,1.3,2.8,4.8,6.2,8.4,8.7,8.7,9.4,9.2,8.1,9.0,9.3,9.2,9.7,10.5,11.1,12.0,11.9,12.1,12.9,13.1}, 0.01);
        assertArrayEquals(bean.getSe_tpw(), new double[] {33.6,34.2,34.6,35.2,35.5,35.3,35.9,36.2,36.1,35.7,32.7,30.9,28.6,27.3,24.7,19.8,14.5,12.4,12.7,12.8,12.4,13.4,15.1,14.0,13.5,13.3,12.4,11.5,11.4,11.8,12.1,12.9,13.4,13.6}, 0.01);
        assertArrayEquals(bean.getSe_r1(), new double[] {45.8,52.5,54.7,54.8,56.7,58.0,60.2,56.9,49.6,43.5,40.7,44.7,48.4,41.5,35.6,36.0,27.7,27.2,22.5,18.6,15.6,19.5,21.3,19.8,20.8,22.8,24.4,24.6,25.6,25.4,25.4,26.6,26.3,26.5}, 0.01);
        assertArrayEquals(bean.getSe_ept950(), new int[] {320,321,322,322,322,323,323,323,323,322,319,318,315,313,314,315,311,309,308,308,307,307,307,306,306,306,305,304,304,304,304,304,303,303});
        assertArrayEquals(bean.getSe_ept850(), new int[] {322,322,322,322,322,323,323,323,319,318,315,314,316,314,312,309,306,303,304,304,303,303,305,304,304,304,303,302,303,302,302,302,302,301});
        assertArrayEquals(bean.getSe_eptdif(), new int[] {-2,-1,0,0,0,0,0,0,4,4,4,4,-1,-1,2,6,5,6,4,4,4,4,2,2,2,2,2,2,1,2,2,2,1,2});

        assertArrayEquals(bean.getSe_pHigashi(), new int[] {0,2,2222,1,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222});
        assertArrayEquals(bean.getSe_pNanto(), new int[] {2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222,2222});
        assertArrayEquals(bean.getSe_flag(), new Boolean[] {true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true});

        assertArrayEquals(bean.getSeV700Score(), new int[] {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSeU850Score(), new int[] {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1});
        assertArrayEquals(bean.getSeKIndexScore(), new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSeSsiScore(), new int[] {0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSeTpwScore(), new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSeEpt950Score(), new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        assertArrayEquals(bean.getSeEptDiffScore(), new int[] {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
	}

}
